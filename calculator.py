# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'calculator.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def __init__(self):
        # ==> VARS
        self.label_length = 18
        self.NUMBER = None
        self.FUNC_CHAR = None
        self.commaIncluded = False

        self.chars = [
            "+",
            "/",
            "-",
            ","
        ]

        self._chars = ["+", "/", ","]

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(321, 469)

        # ICON
        MainWindow.setWindowIcon(QtGui.QIcon('icons/calculator_icon.ico'))

        # ==> MAXIMUM SIZE
        MainWindow.setMaximumWidth(321)
        MainWindow.setMaximumHeight(469)

        # ==> MINIMUM SIZE
        MainWindow.setMinimumWidth(321)
        MainWindow.setMinimumHeight(469)

        MainWindow.setStyleSheet("background-color: rgb(62, 62, 62);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 200, 301, 251))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.button9 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.button9.setStyleSheet("color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.button9.setObjectName("button9")
        self.gridLayout.addWidget(self.button9, 1, 2, 1, 1)
        self.button1 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.button1.setStyleSheet("color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.button1.setObjectName("button1")
        self.gridLayout.addWidget(self.button1, 3, 0, 1, 1)
        self.button8 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.button8.setStyleSheet("color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.button8.setObjectName("button8")
        self.gridLayout.addWidget(self.button8, 1, 1, 1, 1)
        self.eqButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.eqButton.setStyleSheet("background-color: rgb(254, 163, 5); color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.eqButton.setObjectName("eqButton")
        self.gridLayout.addWidget(self.eqButton, 4, 3, 1, 1)
        self.button2 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.button2.setStyleSheet("color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.button2.setObjectName("button2")
        self.gridLayout.addWidget(self.button2, 3, 1, 1, 1)
        self.multiButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.multiButton.setStyleSheet("background-color: rgb(254, 163, 5); color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.multiButton.setObjectName("multiButton")
        self.gridLayout.addWidget(self.multiButton, 1, 3, 1, 1)
        self.subButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.subButton.setStyleSheet("background-color: rgb(254, 163, 5); color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.subButton.setObjectName("subButton")
        self.gridLayout.addWidget(self.subButton, 2, 3, 1, 1)
        self.button5 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.button5.setStyleSheet("color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.button5.setObjectName("button5")
        self.gridLayout.addWidget(self.button5, 2, 1, 1, 1)
        self.commaButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.commaButton.setStyleSheet("color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.commaButton.setObjectName("commaButton")
        self.gridLayout.addWidget(self.commaButton, 4, 2, 1, 1)
        self.button7 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.button7.setStyleSheet("color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.button7.setObjectName("button7")
        self.gridLayout.addWidget(self.button7, 1, 0, 1, 1)
        self.sumButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.sumButton.setStyleSheet("background-color: rgb(254, 163, 5); color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.sumButton.setObjectName("sumButton")
        self.gridLayout.addWidget(self.sumButton, 3, 3, 1, 1)
        self.button6 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.button6.setStyleSheet("color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.button6.setObjectName("button6")
        self.gridLayout.addWidget(self.button6, 2, 2, 1, 1)
        self.button4 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.button4.setStyleSheet("color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.button4.setObjectName("button4")
        self.gridLayout.addWidget(self.button4, 2, 0, 1, 1)
        self.button3 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.button3.setMaximumSize(QtCore.QSize(20000, 20000))
        self.button3.setStyleSheet("color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.button3.setObjectName("button3")
        self.gridLayout.addWidget(self.button3, 3, 2, 1, 1)
        self.ACbutton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.ACbutton.setStyleSheet("background-color: rgb(216, 216, 216);\n"
"font: 75 15pt \"MS Shell Dlg 2\";")
        self.ACbutton.setObjectName("ACbutton")
        self.gridLayout.addWidget(self.ACbutton, 0, 0, 1, 1)
        self.charButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.charButton.setStyleSheet("background-color: rgb(216, 216, 216); font: 75 15pt \"MS Shell Dlg 2\";")
        self.charButton.setObjectName("charButton")
        self.gridLayout.addWidget(self.charButton, 0, 1, 1, 1)
        self.percentButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.percentButton.setStyleSheet("background-color: rgb(216, 216, 216); font: 75 15pt \"MS Shell Dlg 2\";")
        self.percentButton.setObjectName("percentButton")
        self.gridLayout.addWidget(self.percentButton, 0, 2, 1, 1)
        self.divButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.divButton.setStyleSheet("background-color: rgb(254, 163, 5); color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.divButton.setObjectName("divButton")
        self.gridLayout.addWidget(self.divButton, 0, 3, 1, 1)
        self.button0 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.button0.setStyleSheet("color: rgb(255, 255, 255); font: 75 15pt \"MS Shell Dlg 2\";")
        self.button0.setObjectName("button0")
        self.gridLayout.addWidget(self.button0, 4, 0, 1, 2)

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 150, 291, 41))
        self.label.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 20pt \"MS Shell Dlg 2\";")
        self.label.setText("")
        self.label.setObjectName("label")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # ==> WHEN BUTTON CLICKED

        # - NUMBER BUTTONS
        self.button0.clicked.connect(lambda: self.number_clicked(0))
        self.button1.clicked.connect(lambda: self.number_clicked(1))
        self.button2.clicked.connect(lambda: self.number_clicked(2))
        self.button3.clicked.connect(lambda: self.number_clicked(3))
        self.button4.clicked.connect(lambda: self.number_clicked(4))
        self.button5.clicked.connect(lambda: self.number_clicked(5))
        self.button6.clicked.connect(lambda: self.number_clicked(6))
        self.button7.clicked.connect(lambda: self.number_clicked(7))
        self.button8.clicked.connect(lambda: self.number_clicked(8))
        self.button9.clicked.connect(lambda: self.number_clicked(9))

        # - FUNCTION BUTTONS
        # - AC
        self.ACbutton.clicked.connect(self.ac_buttonClicked)
        # - CHAR
        self.charButton.clicked.connect(self.char_buttonClicked)
        # - PERCENT
        self.percentButton.clicked.connect(self.percent_buttonClicked)
        # - EQUAL
        self.eqButton.clicked.connect(self.eq_buttonClicked)
        # - COMMA
        self.commaButton.clicked.connect(self.comma_buttonClicked)

        # - DIVINE
        self.divButton.clicked.connect(self.divine_buttonClicked)
        # - MULTI
        self.multiButton.clicked.connect(self.multi_buttonClicked)
        # - SUB
        self.subButton.clicked.connect(self.sub_buttonClicked)
        # - SUM
        self.sumButton.clicked.connect(self.sum_buttonClicked)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # ==> MY FUNCTIONS
    def comma_checker(self):
        if "." in self.label.text():
            self.commaIncluded = True

    def char_included(self):
        text = self.label.text()

        # IF MINUS CHAR AT THE BEGINNING OF THE NUMBER
        if text[0] == self.chars[2]:
            for char in text:
                if char in self._chars:
                    return True
            else:
                return False
        else:
            for char in text:
                if char in self.chars:
                    return True
            else:
                return False

    def length_check(self):
        length = len(self.label.text()) + 1
        # print(length)
        if length > self.label_length:
            return False
        else:
            return True

    def number_clicked(self, num):
        if self.length_check() is True:
            label_text = self.label.text()
            self.label.setText(label_text + str(num))

    # ==> HERE ARE FUNCTION THAT ARE CONNECTED TO THE FUNCTION BUTTONS:
    def ac_buttonClicked(self):
        self.label.setText("")

    def char_buttonClicked(self):
        if self.char_included() is False:
            if self.commaIncluded is True:
                number = float(self.label.text())
                self.commaIncluded = False
            else:
                number = int(self.label.text())
            number *= (-1)
            text = str(number)
            self.label.setText(text)

    def percent_buttonClicked(self):
        self.comma_checker()
        if self.char_included() is False:
            if self.commaIncluded is True:
                number = float(self.label.text())
                self.commaIncluded = False
            else:
                number = int(self.label.text())
            number /= 100

            text_result = str(number)
            if text_result[-1] == "0":
                text_result = text_result[0:-2]
                print(text_result)
                number = str(text_result)

            self.label.setText(str(number))

    # ==> CALCULATION FUNCTIONS:
    def divine_buttonClicked(self):
        self.comma_checker()
        if self.label.text() != "":
            if self.commaIncluded is True:
                number = float(self.label.text())
                self.commaIncluded = False
            else:
                number = int(self.label.text())
            self.label.setText("")
            self.NUMBER = number
            self.FUNC_CHAR = '/'

    def multi_buttonClicked(self):
        self.comma_checker()
        if self.label.text() != "":
            if self.commaIncluded is True:
                number = float(self.label.text())
                self.commaIncluded = False
            else:
                number = int(self.label.text())
            self.label.setText("")
            self.NUMBER = number
            self.FUNC_CHAR = "x"

    def sub_buttonClicked(self):
        self.comma_checker()
        if self.label.text() != "":
            if self.commaIncluded is True:
                number = float(self.label.text())
                self.commaIncluded = False
            else:
                number = int(self.label.text())
            self.label.setText("")
            self.NUMBER = number
            self.FUNC_CHAR = "-"

    def sum_buttonClicked(self):
        self.comma_checker()
        if self.label.text() != "":
            if self.commaIncluded is True:
                number = float(self.label.text())
                self.commaIncluded = False
            else:
                number = int(self.label.text())
            self.label.setText("")
            self.NUMBER = number
            self.FUNC_CHAR = "+"

    def eq_buttonClicked(self):
        self.comma_checker()
        if self.label.text() != "":
            if self.commaIncluded is True:
                num2 = float(self.label.text())
                self.commaIncluded = False
            else:
                num2 = int(self.label.text())
            result = None

            if self.FUNC_CHAR == '/':
                if num2 != 0:
                    result = self.NUMBER / num2
                else:
                    result = "ERROR"

            elif self.FUNC_CHAR == 'x':
                if self.NUMBER != 0 or num2 != 0:
                    result = self.NUMBER * num2
                else:
                    result = 0

            elif self.FUNC_CHAR == "-":
                result = self.NUMBER - num2

            elif self.FUNC_CHAR == "+":
                result = self.NUMBER + num2

            text_result = str(result)
            if len(self.label.text()) > 3:
                if text_result[-2] == ".":
                    if text_result[-1] == "0":
                        text_result = text_result[0:-2]
                        # print(text_result)
                        result = int(text_result)

            self.label.setText(str(result))

    def comma_buttonClicked(self):
        text = self.label.text()
        if len(text) > 0:
            self.commaIncluded = True
            self.label.setText(text + ".")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Calculator"))
        self.button9.setText(_translate("MainWindow", "9"))
        self.button1.setText(_translate("MainWindow", "1"))
        self.button8.setText(_translate("MainWindow", "8"))
        self.eqButton.setText(_translate("MainWindow", "="))
        self.button2.setText(_translate("MainWindow", "2"))
        self.multiButton.setText(_translate("MainWindow", "x"))
        self.subButton.setText(_translate("MainWindow", "-"))
        self.button5.setText(_translate("MainWindow", "5"))
        self.commaButton.setText(_translate("MainWindow", "."))
        self.button7.setText(_translate("MainWindow", "7"))
        self.sumButton.setText(_translate("MainWindow", "+"))
        self.button6.setText(_translate("MainWindow", "6"))
        self.button4.setText(_translate("MainWindow", "4"))
        self.button3.setText(_translate("MainWindow", "3"))
        self.ACbutton.setText(_translate("MainWindow", "AC"))
        self.charButton.setText(_translate("MainWindow", "+/-"))
        self.percentButton.setText(_translate("MainWindow", "%"))
        self.divButton.setText(_translate("MainWindow", "/"))
        self.button0.setText(_translate("MainWindow", "0            "))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
